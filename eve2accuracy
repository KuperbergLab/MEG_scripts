#!/usr/bin/env python

import os
from glob import glob

studies = ['Baleen','MaskedMM','AXCPT']
studies_codes = dict({'MaskedMM':['1','2','3','4','5'],'Baleen':['1','2','4','5','6','7','8','9','10','11','12']})
studies_task = dict({'MaskedMM':['4','5'],'Baleen':['5','10','11','12']})
studies_notask = dict({'MaskedMM':['1','2','3'],'Baleen':['1','2','4','6','7','8','9']})
code_names = dict({'MaskedMM':['DirRel','IndRel','Unrel','InsPr','InsTar'],
					'Baleen':['LRelTar','LUnrTar','LUnrFil','LAnTar','HRelTar','HUnrTar','HRelFil',
								'HUnrFil','HAnTar','LAnPr','HAnPr'],
					'AXCPT':['AY','BY','BX','AX']})
					
					
def find_eves(study,subject):
	all_eve =  glob(os.path.join('/cluster/kuperberg/SemPrMM/MEG/data',subject,'eve','*.eve'))
	good_eve = [eve for eve in all_eve if study in eve and not 'Mod' in eve]
	return good_eve	

def closest_response(lines,i):
	blah = [k for k,v in enumerate(lines) if v[3] == '16']
	if len(blah) == 0:
		return 0
	else:
		blah.append(i)
		new_blah = sorted(blah)
		i_ind = new_blah.index(i)
		if i_ind == 0:
			return new_blah[1]
		elif i_ind + 1 == len(new_blah):
			return new_blah[len(new_blah)-2]
		else:
			ind1 = new_blah[i_ind+1]
			ind2 = new_blah[i_ind-1]
			if (ind1 - i) <= (i - ind2):
				return ind1
			else:
				return ind2

def parse_eve(eve,study):
	with open(eve,'r') as f:
		all_lines = f.readlines()
	f.close()
	lines = [line.split() for line in all_lines]
	results = dict()
	for i,line in enumerate(lines):
		code = line[3]
		if code in studies_codes[study]:
			if code not in results.keys():
				results[code] = [0,0]
			rt = float(lines[closest_response(lines,i)][1]) - float(line[1])
			if (code in studies_task[study] and -.5 <= rt <= 1.4):
				results[code] = [results[code][0]+1,results[code][1]+1]
			elif code in studies_notask[study] and (not(0 <= rt <= 1.4) or (rt < 0))  :
				results[code] = [results[code][0]+1,results[code][1]+1]
			else:
				results[code] = [results[code][0], results[code][1]+1]
	return results
	
def parse_study(study,subjects):
	all_subjects = dict()
	for sub in subjects:
		sub_results = dict()
		eves = find_eves(study,sub)
		for eve in eves:
			results = parse_eve(eve,study)
			for key in results.keys():
				code_results = results[key]
				if key in sub_results:
					sub_results[key] = [code_results[0]+sub_results[key][0],code_results[1]+sub_results[key][1]]
				else:
					sub_results[key] = code_results
		all_subjects[sub] = sub_results
	return all_subjects

	
def get_subjects(study):
	path = os.path.join('/cluster/kuperberg/SemPrMM/','MEG','data')+os.sep
	all_subs = [name for name in os.listdir(path) if os.path.isdir(os.path.join(path, name))]
	return [sub for sub in all_subs if len(find_eves(study,sub)) > 0]
	

def main():
# 	parse_eve('/cluster/kuperberg/SemPrMM/MEG/data/ya3/eve/ya3_BaleenRun3.eve','Baleen')
	for study in studies:
		subjects = get_subjects(study)
		study_results = parse_study(study,subjects)
		with open('MEG_'+study+'_accuracy.log','w') as f:
			#write out header
			f.write('sub:\t\t')
			for code in code_names[study]:
				f.write(code+'\t\t')
			f.write('AllTasks\n')
			for sub in sorted(study_results.keys()):
				num = den = 0
				f.write(sub+':\t\t')
				results = study_results[sub]
				codes = sorted([int(key) for key in results.keys()])
				num = sum([item[0] for code,item in results.items() if code in studies_task[study]])
				den = sum([item[1] for code,item in results.items() if code in studies_task[study]])
				sorted_results = [float(results[str(code)][0])/float(results[str(code)][1]) for code in codes]
				for result in sorted_results:
					f.write(str(round(result,3))+'\t\t')
				f.write(str(round(float(num)/den,3))+'\n')
		
if __name__ == '__main__':
	main()